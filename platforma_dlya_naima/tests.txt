"""
Этот файл предназначен для тестирования функциональности веб-приложения, используя pytest.
Тесты охватывают аутентификацию пользователей, регистрацию, отображение и обработку тестов.
"""

import pytest
from flask import url_for
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import login_user, logout_user, current_user
from app import create_app, db
from app.models import User, Candidate, HR, Test, Question

@pytest.fixture(scope='module')
def test_client():
    flask_app = create_app('testing')
    testing_client = flask_app.test_client()
    ctx = flask_app.app_context()
    ctx.push()
    yield testing_client
    ctx.pop()

@pytest.fixture(scope='module')
def init_database():
    db.create_all()
    user1 = User(email='testuser1@example.com', password_hash=generate_password_hash('password'))
    user2 = HR(email='hr@example.com', password_hash=generate_password_hash('password'))
    db.session.add(user1)
    db.session.add(user2)
    db.session.commit()
    yield db
    db.drop_all()

def test_home_page(test_client):
    response = test_client.get('/')
    assert response.status_code == 200

def test_login_page(test_client):
    response = test_client.get(url_for('auth.login'))
    assert response.status_code == 200
    assert b"Login" in response.data

def test_registration_page(test_client):
    response = test_client.get(url_for('auth.register'))
    assert response.status_code == 200
    assert b"Register" in response.data

def test_dashboard_access_without_login(test_client):
    response = test_client.get(url_for('main.dashboard'), follow_redirects=True)
    assert b"Please log in to access this page." in response.data

def test_invalid_login(test_client):
    response = test_client.post(url_for('auth.login'), data=dict(
        email='nonexistent@example.com',
        password='wrongpassword'
    ), follow_redirects=True)
    assert b"Invalid username or password" in response.data

def test_duplicate_email_registration(test_client, init_database):
    response = test_client.post(url_for('auth.register'), data=dict(
        email='testuser1@example.com',
        password='password',
        confirm='password'
    ), follow_redirects=True)
    assert b"Email already registered" in response.data

def test_login_and_dashboard(test_client, init_database):
    response = test_client.post(url_for('auth.login'), data=dict(
        email='testuser1@example.com',
        password='password'
    ), follow_redirects=True)
    assert b"Dashboard" in response.data

def test_logout(test_client, init_database):
    test_client.post(url_for('auth.login'), data=dict(
        email='testuser1@example.com',
        password='password'
    ), follow_redirects=True)
    response = test_client.get(url_for('auth.logout'), follow_redirects=True)
    assert b"Please log in to access this page." in response.data

def test_candidate_test_submission_and_hr_evaluation(test_client, init_database):
    test = Test(title='Test Title', content='Test Content')
    question = Question(text='Test Question', correct_answer='Option1', options=['Option1', 'Option2'])
    test.questions.append(question)
    db.session.add(test)
    db.session.commit()
    candidate = Candidate.query.filter_by(email='testuser1@example.com').first()
    login_user(candidate)
    assert current_user.is_authenticated
    response = test_client.post(url_for('test.submit', test_id=test.id), data=dict(
        question_id=question.id,
        answer='Option1'
    ), follow_redirects=True)
    assert b"Test Submitted" in response.data
    logout_user()
    hr = HR.query.filter_by(email='hr@example.com').first()
    login_user(hr)
    response = test_client.get(url_for('hr.evaluate', test_id=test.id))
    assert b"Test Evaluation" in response.data
    logout_user()
    db.session.delete(test)
    db.session.commit()
